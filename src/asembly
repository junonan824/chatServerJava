format ELF executable 3
entry _start

segment readable executable

_start: 
    ; Initialize the stack pointer
    mov byte [stackTop], 0              ; Set stackTop to 0 (empty stack)

    ; Push each character from the input string onto the stack
    mov esi, inputString                ; Set ESI to point to the input string
push_loop: 
    lodsb                               ; Load the next character from inputString into AL
    cmp al, 0                           ; Check if the character is NULL (end of string)
    je pop_loop                         ; If NULL, jump to pop_loop to start popping
    movzx edi, byte [stackTop]          ; Get the current stack position (zero-extend to 32 bits)
    mov [mystack + edi], al             ; Store the character in the stack at the current position
    inc byte [stackTop]                 ; Increment stackTop to point to the next free space
    jmp push_loop                       ; Repeat for the next character

pop_loop: 
    dec byte [stackTop]                 ; Decrement stackTop to get the topmost element
    movzx edi, byte [stackTop]          ; Get the updated stack position (zero-extend to 32 bits)
    mov al, [mystack + edi]             ; Retrieve the character from the stack
    cmp edi, 0                          ; Check if the stack is empty
    je end_program                      ; If empty, jump to end_program to exit

    ; Print the character using a system call
    mov edx, 1                          ; Number of bytes to write (1 character)
    lea ecx, [mystack + edi]            ; Load the address of the character
    mov ebx, 1                          ; File descriptor (stdout)
    mov eax, 4                          ; System call number for write
    int 0x80                            ; Make the system call to print the character
    jmp pop_loop                        ; Repeat for the next character

end_program: 
    ; Exit the program
    mov eax, 1                          ; System call number for exit
    xor ebx, ebx                        ; Exit code 0
    int 0x80                            ; Make the system call to terminate the program

segment readable writable

; Data Section
inputString db "Hello, World!", 0       ; Input string to be reversed
stackSize equ 100                       ; Size of the stack
mystack rb stackSize                    ; Reserve memory for the stack
stackTop rb 1                           ; Variable to track the top of the stack